


public static Card[] sort(Card[] cards) {
    int max = 0;
    int rank = 0;
        int[] counts = new int[12];
        for(Card c : cards) {
            if(max < ++counts[c.rank]) {
                max = counts[c.rank];
                rank = c.rank;
            }
        }

        int i;
        int[] countf = new int[max];
        for(i = 0; i < counts.length; i++) {
            countf[counts[i]]++;
        }
        for(i = countf.length - 1; i > -1; i--) {
            //for(int j = )
        }
        return cards;
    }




/*

    hand evaluation

    necessary representations of a hand:

    count = [aaaa][kkkk][qqqq][jjjj][tttt]...[2222]
        ex:[1111][0001][0000][0000][0000]...[0000]
    rank = [akqjt...2a]
        ex:[111110...]
    suit = { [c,d,h,s][][][][]... }
        ex:{[0][0][1][2][3]}

    categorize with hand % 15:

    5 card hands:

    high card: [1][1][1][1][1][0]...                = 1+1+1+1+1 = 5 > 4
    pair: [11][1][1][1][0]...                       = 3+1+1+1   = 6 > 5
    two pair: [11][11][1][0]...                     = 3+3+1     = 7 > 6
    trips: [111][1][1][0]...                        = 7+1+1     = 9 > 8
    full house: [111][11][0]...                     = 7+3       = 10> 9
    quads: [1111][1][0]...                          = 15+1      = 1 > 0
    +
    straight: rank/(rank&-rank) == 31                           = -2> 2
    flush: suits[0] == (suits[1]|suits[2]|suits[3]|suits[4])    = -1> 3,1
    =
    result: quads,straight flush,straight,flush,high card,pair,two pair,X,trips,full house

    hand comparison
    int[] r = ranks after sorting by amount>rank
    int t = hand evaluation

*/


/*
for(int i = 0; i < n-1; i++) {
    for(int j = 0; j < n-i-1; j++) {
        if(c[j].compare(c[j+1]) > 0) {
            Card swap = c[j];
            c[j] = c[j+1];
            c[j+1] = swap;
        }
    }
}*/

/*
    public int compare(Hand other) {
        return 0;
    }
    // return 0 if no pair
    // return rank of pair if pair exists
    public int hasPair(){
      for(int i=0;i<allCards.length;i++){
        for(int j=0;j<allCards.length;j++){
          if(j == i) continue;
          if( allCards[i].rank == allCards[j].rank){
            return allCards[i].rank;
          }
        }
      }
      return
    }
    public int hasTwoPair(){
      // first discovered pair
      firstPair = hasPair();
      if(firstPair == 0) return 0;
      for(int i=0;i<allCards.length;i++){
        for(int j=0;j<allCards.length;j++){
          if(j == i) continue;
          if( allCards[i].rank == allCards[j].rank){
            if() allCards[i].rank;
          }
        }
      }
    }
    public int hasTrips(){
      for(int i=0;i<allCards.length;i++){
        for(int j=0;j<allCards.length;j++){
          for(int k=0;k<allCards.length;k++){
            if(i == j || j == k) continue;
            rank1 = allCards[i].rank;
            rank2 = allCards[j].rank;
            rank3 = allCards[k].rank;
            if(rank1 == rank2 && rank2 == rank3){
              return allCards[i].rank;
            }
          }
        }
      }
    }
    hand ranking
    enum? then {sf,q,fh,f,s,tp,p,h}
    enum.values().getIndex()?
    ...
    otherwise idk...
    */



//public ArrayList<Card> allCards;


private enum Suit { CLUB, DIAMOND, HEART, SPADE; }
private enum Value {
    TWO(2), THREE(3), FOUR(4), FIVE(5), SIX(6), SEVEN(7), EIGHT(8), NINE(9), TEN(10), JACK(11), QUEEN(12), KING(13), ACE(14);
    private int value;
    Value(int v) { this.value = v; }
    boolean compare(Value other) { return false; }
}

public void shuffle() {
    for (int i = 0; i < size; i++) {
        int c = (int) (Math.random() * (i + 1));
        Card swap = cards[c];
        cards[c] = cards[i];
        cards[i] = swap;
    }
}
int n = arr.length;
        for (int i = 0; i < n-1; i++)
            for (int j = 0; j < n-i-1; j++)
                if (arr[j] > arr[j+1])
                {
                    // swap arr[j+1] and arr[i]
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }

                convert hand data into 4 bool sequences by suit, ace to ace
                    c=[akqjt...2a],  d=[],    h=[],    s=[]

                straight flush mask: sf = [11111]

                direct searches:
                straight flush: sf<<x & [c|d|h|s], x:0-9
                straight: sf<<x & (c|d|h|s), x:0-9
                flush: sf < [c|d|h|s]
                quads: c&d&h&s
                trips: c&d&h | c&d&s | c&h&s | d&h&s
                pairs: c&d | c&h | c&h | d&h | d&s | h&s

                for full house & two pair:
                    -form sets of trips and pairs
                    -two pair = top two pairs (if they exist)
                    -remove rank of top triple from pairs
                    -full house = top triple and top pair (if they exist)

//private Card[] hole;
//public static final card
//public static final view
//private int chip;

public boolean receive(Card card) {
    return false;
}



    6 card hands:
    high card: [1][1][1][1][1][1][0]... = 6
    pair: [11][1][1][1][1][0]...        = 7
    two pair: [11][11][1][1][0]...      = 8
              [11][11][11][0]...        = 9
    trips: [111][1][1][1][0]...         = 10
    full house: [111][11][1][0]...      = 11
                [111][111][0]...        = 14
    quads: [1111][1][1][0]...           = 2
           [1111][11][0]...             = 3


    7 card hands:
    high card: [1][1][1][1][1][1][1][0]...  = 7
    pair: [11][1][1][1][1][1][0]...         = 8
    two pair: [11][11][1][1][1][0]...       = 9
              [11][11][11][1][0]...         = 10
    trips:  [111][1][1][1][1][0]...         = 11
    full house: [111][11][1][1][0]...       = 12
                [111][11][11][0]...         = 13
                [111][111][1][0]...         = 0
    quads: [1111][1][1][1][0]...            = 3
           [1111][11][1][0]...              = 4
           [1111][111][0]...                = 7 | 22



Deck d = new Deck();
d.print();
d.shuffle();
d.print();
d.reset();
d.print();
for(int i = 0; i < 5; i++) { d.deal(); }
